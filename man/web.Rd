% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/web_and_biadjacency.R
\name{web.formula}
\alias{web.formula}
\alias{web.default}
\alias{web}
\alias{as_web}
\alias{kegg_web}
\alias{weaveWeb}
\title{Make a web}
\usage{
\method{web}{formula}(formula, link = NULL, tableX = NULL, tableY = NULL, ...)

\method{web}{default}(x, y, link = NULL, tableX = NULL, tableY = NULL, ...)

as_web(tableY, tableX, dictionary)

kegg_web(x, ...)

weaveWeb(x, link = kegg_link(), ...)
}
\arguments{
\item{formula}{a formula of the form y ~ x, denoting desired output
format; assigns y to rows and columns to x. Equivalent to using \code{x} and
\code{y} arguments.}

\item{link}{One of the following:
\itemize{
 \item Character scalar with value "none"
 \item data.frame with two columns
 \item list with two such data.frames
}}

\item{tableY, tableX}{A table containing features of interest. Rows should be 
samples and columns should be features. Y and X refer to the position of the 
features in a formula: Y ~ X.}

\item{...}{further arguments.}

\item{x}{name of column, \code{tableX}, feature type.}

\item{y}{name of row, \code{tableY}, feature type.}

\item{dictionary}{A binary adjacency matrix of class \code{Matrix}, or 
coercible to \code{Matrix}}
}
\value{
an \code{anansiWeb} object, with sparse binary biadjacency matrix 
with features from \code{y} as rows and features from \code{x} as columns in 
\code{dictionary} slot.

an \code{anansiWeb} object
}
\description{
Generate a biadjacency matrix, linking the features between two tables. 
Return an \code{anansiWeb} object which contains all three. 

\code{weaveWeb()} is for general use and has flexible default settings. 

\code{kegg_web()} is a wrapper that sets \code{link} to \code{kegg_link()}. 
All variants are special cases of \code{web()}.  

\code{as_web()} constructs an \code{anansiWeb} object from three tables.
}
\details{
If the \code{link} argument is \code{"none"}, all features will be considered
 linked. If one or more \code{data.frame}s, colnames should be as specified 
 in \code{x} and \code{y}.
}
\examples{
# Basic usage
weaveWeb(cpd ~ ko)
web(x = "ko", y = "ec", link = ec2ko)
web(ec ~ cpd, link = ec2cpd)

# Constuct an anansiWeb object from components:

tX <- `colnames<-`(replicate(5, (rnorm(36))), letters[1:5])
tY <- `colnames<-`(replicate(3, (rnorm(36))), LETTERS[1:3])
d <- matrix(TRUE, nrow = NCOL(tY), ncol = NCOL(tX),
            dimnames = list(colnames(tY), colnames(tX)))

as_web(tY, tX, d)

# A wrapper is available for kegg ko, ec and cpd data
generic      <- web(cpd ~ ko, link = kegg_link())
kegg_wrapper <- kegg_web( cpd ~ ko )

identical(generic, kegg_wrapper)

# The following are equivalent to transposition:
a <- anansi:::get_dict( web(ko ~ cpd, link = kegg_link()) )
b <- anansi:::get_dict( web(cpd ~ ko, link = kegg_link()) )

identical(a, t(b))

}
\seealso{
[kegg_link()] as well as \code{ec2ko} and \code{ec2cpd} for examples
 of input for \code{link}.
}
